<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.atguigu.crowdfunding.cpes.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.atguigu.crowdfunding.cpes.bean.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="loginacct" property="loginacct" jdbcType="VARCHAR" />
    <result column="userpswd" property="userpswd" jdbcType="CHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="createtime" property="createtime" jdbcType="CHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.atguigu.crowdfunding.cpes.bean.User" >
    insert into t_user (id, name, loginacct, 
      userpswd, email, createtime)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{loginacct,jdbcType=VARCHAR}, 
      #{userpswd,jdbcType=CHAR}, #{email,jdbcType=VARCHAR}, #{createtime})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.atguigu.crowdfunding.cpes.bean.User" >
    update t_user
    set name = #{name,jdbcType=VARCHAR},
      loginacct = #{loginacct,jdbcType=VARCHAR},
      userpswd = #{userpswd,jdbcType=CHAR},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select id, name, loginacct, userpswd, email, createtime
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, name, loginacct, userpswd, email, createtime
    from t_user
  </select>
  <select id="selectUserByAcc" resultMap="BaseResultMap" >
    select id, name, loginacct, userpswd, email, createtime
    from t_user where loginacct like binary #{loginacct}
  </select>
  <select id="getCount" resultType="int" >
    select count(*) from t_user
  </select>
  <select id="getUserPage" resultMap="BaseResultMap" >
    select id, name, loginacct, userpswd, email, createtime
    from t_user order by createtime desc limit #{start},#{pageSize}
  </select>
  <select id="queryRoleConnection" resultType="urc">
  	select userid, count(roleid) as urcount
  	from (
  		select * from t_user_role
  		where userid in
  		<foreach collection="users" item="user" open="(" separator="," close=")">#{user.id}</foreach>
  	) b
  	group by userid
  </select>
  <delete id="deleteByPrimaryKeys">
  	delete from t_user where id in
  	<foreach collection="users" item="user" open="(" separator="," close=")">#{user.id}</foreach>
  </delete>
  <select id="selectUserRoleById" resultType="int">
  	select roleid from t_user_role where userid=#{userid}
  </select>
  <insert id="addUserRoleRelation" >
    insert into t_user_role(userid,roleid) values
    <foreach collection="roleids" item="id" separator=",">(#{userid},#{id})</foreach>
  </insert>
  <delete id="remove">
  	delete from t_user_role where userid=#{userid}
  </delete>
  <delete id="removeUserRoleRelation">
  	delete from t_user_role where userid=#{userid} and roleid in
  	<foreach collection="roleids" item="id" open="(" separator="," close=")">#{id}</foreach>
  </delete>
  <select id="getPermissions" resultType="permission">
  	select * from t_permission
  	where id in(
  		select permissionid from t_role_permission
  		where roleid in(
  			select roleid from t_user_role where userid = #{id}
  		)
  	)
  </select>
</mapper>